import pandas as pd
import numpy as np
import time
import threading
import json
import os
from datetime import datetime, timezone
from collections import deque

# --- Library Import for Websocket ---
try:
    from websocket import WebSocketApp
except ImportError:
    print("❌ Critical Error: The 'websocket-client' library is not installed correctly."); exit(1)

# ==============================================================================
# 1. BOT & STRATEGY CONFIGURATION
# ==============================================================================
APEX_STRATEGY = {
    'stake_ot': 1.0, 'stake_nt': 6.0,
    'p_ot_b': "+20.00", 'p_nt_b': "+40.00",
    'n_ot_b': "-20.00", 'n_nt_b': "-40.00",
    'duration': 5
}
TARGET_TRADE_ROUNDS = 2500
COOLDOWN_SECONDS = 5
TICK_HISTORY_SIZE = 50 

# --- Connection & Logging ---
API_KEY = 'LLU4UwUGOCv5Cpq'
ACTIVITY_LOG_FILE = 'apex_analyst_activity_log.txt'

# ==============================================================================
# 2. SIMPLE TEXT LOGGER
# ==============================================================================
class TextLogger:
    def __init__(self, filename):
        self.filename = filename; self.lock = threading.Lock()
        print(f"📄 Activity log will be saved to '{self.filename}'")
    def log(self, message):
        with self.lock:
            with open(self.filename, 'a') as f:
                f.write(f"{datetime.now(timezone.utc).isoformat()} - {message}\n")

# ==============================================================================
# 3. THE ANALYST TRADING BOT CLASS
# ==============================================================================
class AnalystTraderBot:
    def __init__(self, api_key, strategy, logger):
        self.api_key=api_key; self.strategy=strategy; self.logger=logger
        self.ws=None; self.is_running=True; self.is_connected=False; self.is_authorized=False
        self.state="INITIALIZING"; self.active_contracts={}; self.proposal_details={}
        self.current_round_results=[]; self.reconnect_lock=threading.Lock(); self.trade_round_counter=0
        self.tick_history=deque(maxlen=TICK_HISTORY_SIZE)
        # --- NEW: Stores the raw volatility score ---
        self.last_volatility_score = 0
        self.completed_rounds_data = []

    def start(self):
        self.connect()
        while self.is_running:
            self.run_logic_tick()
            if not self.is_connected and self.state != "RECONNECTING": self.start_reconnect()
            time.sleep(1)

    def stop(self):
        self.is_running = False
        if self.ws and self.is_connected: self.ws.close()
        self.log_and_print("Bot has been stopped.")

    def start_reconnect(self):
        self.state = "RECONNECTING"
        if self.reconnect_lock.acquire(blocking=False):
            self.is_authorized = False; self.log_and_print("Connection lost. Reconnecting in 10s...")
            threading.Timer(10, self.attempt_reconnect).start()
    
    def attempt_reconnect(self):
        if self.is_running: self.connect()
        self.reconnect_lock.release()

    def connect(self):
        self.log_and_print("🔌 Attempting to connect...")
        self.ws = WebSocketApp("wss://ws.binaryws.com/websockets/v3?app_id=1089", on_open=self.on_open, on_message=self.on_message, on_error=self.on_error, on_close=self.on_close)
        threading.Thread(target=self.ws.run_forever, daemon=True).start()
    
    def log_and_print(self, message): print(message); self.logger.log(message)
    def send(self, data):
        if self.ws and self.is_connected: data['req_id'] = int(time.time()*1000); self.ws.send(json.dumps(data))
    
    def on_open(self, ws): self.is_connected=True; self.state="CONNECTED"; self.log_and_print("🔗 Connected."); self.authorize()
    def on_error(self, ws, error): self.log_and_print(f"❌ WebSocket error: {error}")
    def on_close(self, ws, c, m): self.log_and_print("🔌 Connection closed."); self.is_connected = False
    def authorize(self): self.log_and_print("🔐 Authorizing..."); self.send({"authorize": self.api_key})

    def on_message(self, ws, message):
        try:
            data = json.loads(message)
            if 'error' in data: self.handle_error(data); return
            msg_type = data.get('msg_type')
            if msg_type == 'authorize': self.is_authorized=True; self.log_and_print("✅ Authorized."); self.send({'ticks': 'R_75', 'subscribe': 1}); self.state = "IDLE"
            elif msg_type == 'tick' and 'tick' in data: self.tick_history.append(data['tick']['quote'])
            elif msg_type == 'proposal': self.send({"buy": data['proposal']['id'], "price": data['proposal']['ask_price']})
            elif msg_type == 'buy' and 'buy' in data: self.active_contracts[data['buy']['contract_id']] = True; self.send({"proposal_open_contract": 1, "contract_id": data['buy']['contract_id'], "subscribe": 1})
            elif msg_type == 'proposal_open_contract': self.handle_contract_update(data.get('proposal_open_contract'))
        except Exception as e: self.log_and_print(f"❌ CRITICAL: Error processing message: {e}")

    def handle_error(self, data):
        self.log_and_print(f"❗️ API Error: {data['error'].get('message', 'Unknown error')}")
        if data.get('msg_type') == 'buy': self.active_contracts.clear(); self.transition_to_cooldown()

    def handle_contract_update(self, contract):
        contract_id = contract.get('contract_id')
        if not contract or not contract.get('is_sold') or not self.active_contracts.get(contract_id): return
        profit = float(contract.get('profit', 0)); c_type = contract.get('contract_type', 'UNKNOWN'); result = "WIN" if profit > 0 else "LOSS"
        self.current_round_results.append({'type': c_type, 'profit': profit, 'result': result})
        if not self.active_contracts: del self.active_contracts[contract_id] # Should not happen, but for safety
        else: del self.active_contracts[contract_id]
        if not self.active_contracts: self.log_round_and_cooldown()

    def log_round_and_cooldown(self):
        net_profit = sum(res['profit'] for res in self.current_round_results)
        # Store data for final analysis
        self.completed_rounds_data.append({
            'net_profit': net_profit,
            'volatility_score': self.last_volatility_score
        })
        summary = f"Trade round #{self.trade_round_counter} complete. Net P/L: ${net_profit:+.2f} (Volatility: {self.last_volatility_score:.2f})"
        self.log_and_print(f"   -> {summary}")
        self.transition_to_cooldown()
        
    def run_logic_tick(self):
        if not (self.is_authorized and self.state == "IDLE"): return
        self.transition_to_trading()

    def transition_to_trading(self):
        if self.trade_round_counter >= TARGET_TRADE_ROUNDS:
            self.log_and_print(f"✅ Target reached. Stopping."); self.is_running = False; return
        if len(self.tick_history) < self.tick_history.maxlen:
            print(f"\rGathering initial tick data... {len(self.tick_history)}/{self.tick_history.maxlen}", end="")
            return

        self.state = "TRADING"; self.trade_round_counter += 1; self.current_round_results.clear()
        
        # --- ANALYSIS IS NOW FOR LOGGING ONLY ---
        self.last_volatility_score = np.std(self.tick_history)
        
        self.log_and_print(f"\n🚀 Initiating Trade Round #{self.trade_round_counter}/{TARGET_TRADE_ROUNDS} [Volatility: {self.last_volatility_score:.2f}]")
        
        base = {"basis": "stake", "currency": "USD", "duration": self.strategy['duration'], "duration_unit": "t", "symbol": "R_75"}
        trades = [{'contract_type': 'ONETOUCH', 'barrier': self.strategy['p_ot_b'], 'amount': self.strategy['stake_ot']}, {'contract_type': 'NOTOUCH',  'barrier': self.strategy['p_nt_b'], 'amount': self.strategy['stake_nt']}, {'contract_type': 'ONETOUCH', 'barrier': self.strategy['n_ot_b'], 'amount': self.strategy['stake_ot']}, {'contract_type': 'NOTOUCH',  'barrier': self.strategy['n_nt_b'], 'amount': self.strategy['stake_nt']}]
        for trade in trades: self.send({**base, **trade, "proposal": 1})

    def transition_to_cooldown(self):
        self.state = "WAITING"; threading.Timer(COOLDOWN_SECONDS, self.end_cooldown).start()
    def end_cooldown(self):
        if self.is_running and self.is_authorized: self.state = "IDLE"

    def generate_final_report(self):
        """--- NEW: Analyzes based on numerical volatility and creates ranged bins. ---"""
        if not self.completed_rounds_data:
            print("\nNo trade data was collected to generate a report.")
            return
            
        print("\n\n" + "="*80)
        print("SESSION PERFORMANCE ANALYSIS BY VOLATILITY".center(80))
        print("="*80)
        
        df = pd.DataFrame(self.completed_rounds_data)
        
        # Define the bins and labels for our volatility ranges
        bins = [0, 10, 20, 30, 40, np.inf]
        labels = ['0-10 (Very Low)', '10-20 (Low)', '20-30 (Medium)', '30-40 (High)', '40+ (Very High)']
        
        # Create a new column with the volatility range category
        df['volatility_range'] = pd.cut(df['volatility_score'], bins=bins, labels=labels, right=False)
        
        # Group by the new range and calculate key metrics
        analysis = df.groupby('volatility_range')['net_profit'].agg(['sum', 'mean', 'count', lambda s: (s > 0).mean() * 100])
        analysis.columns = ['Total Profit', 'Avg Profit/Round', 'Trade Count', 'Win Rate %']
        
        print("Performance by Market Volatility Range:")
        print(analysis.sort_values(by='Avg Profit/Round', ascending=False).to_string(formatters={
            'Total Profit': '${:,.2f}'.format,
            'Avg Profit/Round': '${:,.2f}'.format,
            'Win Rate %': '{:.1f}%'.format
        }))
        print("\n" + "="*80)

# ==============================================================================
# 5. MAIN EXECUTION
# ==============================================================================
def main():
    logger = TextLogger(ACTIVITY_LOG_FILE)
    bot = AnalystTraderBot(API_KEY, APEX_STRATEGY, logger)
    try:
        bot.start()
    except KeyboardInterrupt:
        print("\n🛑 Shutting down bot manually...")
    finally:
        bot.stop()

    bot.generate_final_report()
        
    print("\n[Program finished]")

if __name__ == "__main__":
    print("="*50 + "\n" + "ANALYST TRADING BOT - INITIALIZING".center(50) + "\n" + "="*50)
    # Before running, make sure you have pandas and numpy installed
    main()
