import pandas as pd
import itertools
import time
import numpy as np
import io
import os

# This script requires the matplotlib library for plotting.
# Please install it first by running: pip install matplotlib
try:
    import matplotlib.pyplot as plt
except ImportError:
    print("❌ Critical Error: The 'matplotlib' library is required for plotting.")
    print("   Please install it by running: pip install matplotlib")
    exit(1)

# ==============================================================================
# 1. BACKTESTING CONFIGURATION
# ==============================================================================
TICK_DATA_FILE = 'live_market_data.csv'
DATA_DOWNSAMPLE_FACTOR = 10

# --- UPDATED: Focus on the $1000 capital scenario ---
INITIAL_CAPITAL_AMOUNTS = [1000.0]

# --- Golden strategies to analyze with the new stake logic ---
STRATEGIES_TO_TEST = [
    {
        'id': 'HEDGE_5t_1-6_Ratio_20-40_Barriers', 'duration': 5, 'stake_ratio': (1, 6),
        'p_ot_b': 20.0, 'p_nt_b': 40.0, 'n_ot_b': 20.0, 'n_nt_b': 40.0
    },
    {
        'id': 'HEDGE_5t_1-5_Ratio_20-40_Barriers', 'duration': 5, 'stake_ratio': (1, 5),
        'p_ot_b': 20.0, 'p_nt_b': 40.0, 'n_ot_b': 20.0, 'n_nt_b': 40.0
    },
    {
        'id': 'HEDGE_10t_1-6_Ratio_20-40_Barriers', 'duration': 10, 'stake_ratio': (1, 6),
        'p_ot_b': 20.0, 'p_nt_b': 40.0, 'n_ot_b': 20.0, 'n_nt_b': 40.0
    }
]

TOP_N_RESULTS_TO_SHOW = 25

# ==============================================================================
# 2. EMBEDDED PAYOUT DATA
# ==============================================================================
PAYOUT_DATA_STRING = """barrier,payout,stake,contract_type
10,1.47,100,ONETOUCH
12,1.54,100,ONETOUCH
14,1.615,100,ONETOUCH
16,1.695,100,ONETOUCH
18,1.781,100,ONETOUCH
20,1.8768,100,ONETOUCH
22,1.9745,100,ONETOUCH
24,2.0825,100,ONETOUCH
26,2.1988,100,ONETOUCH
28,2.3225,100,ONETOUCH
30,2.4557,100,ONETOUCH
32,2.6008,100,ONETOUCH
34,2.7562,100,ONETOUCH
36,2.922,100,ONETOUCH
38,3.1007,100,ONETOUCH
40,3.2976,100,ONETOUCH
42,3.5096,100,ONETOUCH
44,3.7156,100,ONETOUCH
46,3.9464,100,ONETOUCH
48,4.2153,100,ONETOUCH
50,4.4718,100,ONETOUCH
52,4.7975,100,ONETOUCH
54,5.0867,100,ONETOUCH
56,5.4132,100,ONETOUCH
10,2.38,100,NOTOUCH
12,2.219,100,NOTOUCH
14,2.08,100,NOTOUCH
16,1.96,100,NOTOUCH
18,1.877,100,NOTOUCH
20,1.7632,100,NOTOUCH
22,1.6844,100,NOTOUCH
24,1.6133,100,NOTOUCH
26,1.5496,100,NOTOUCH
28,1.4939,100,NOTOUCH
30,1.4434,100,NOTOUCH
32,1.3975,100,NOTOUCH
34,1.3562,100,NOTOUCH
36,1.3196,100,NOTOUCH
38,1.2862,100,NOTOUCH
40,1.2554,100,NOTOUCH
42,1.2285,100,NOTOUCH
44,1.2038,100,NOTOUCH
46,1.1808,100,NOTOUCH
48,1.159,100,NOTOUCH
50,1.14,100,NOTOUCH
52,1.12,100,NOTOUCH
54,1.10,100,NOTOUCH
56,1.09,100,NOTOUCH
"""
# ==============================================================================
# 3. HELPER & REPORTING CLASSES/FUNCTIONS
# ==============================================================================
class CSVSummaryLogger:
    def __init__(self, filename='backtest_summary.csv'):
        self.filename = filename
        self.fieldnames = ['strategy_id', 'initial_capital', 'final_balance', 'total_profit_usd', 'total_profit_percent', 'max_drawdown_usd', 'max_drawdown_percent', 'max_consecutive_wins', 'max_consecutive_losses', 'total_rounds', 'plot_filename']
        self._initialize_file()

    def _initialize_file(self):
        if not os.path.exists(self.filename):
            with open(self.filename, 'w', newline='') as f:
                writer = csv.DictWriter(f, fieldnames=self.fieldnames)
                writer.writeheader()
            print(f"📄 Created summary log file: {self.filename}")

    def log_summary(self, summary_data):
        with open(self.filename, 'a', newline='') as f:
            writer = csv.DictWriter(f, fieldnames=self.fieldnames)
            writer.writerow(summary_data)

def find_closest_payout(barrier, contract_type, payout_df):
    """--- NEW ROBUST VERSION ---
    Finds the closest barrier for a specific contract type and returns its payout.
    This version is more defensive against data type errors.
    """
    try:
        numeric_barrier = float(barrier)
    except (ValueError, TypeError):
        return 1.0 # Default payout if barrier is not a valid number

    type_df = payout_df[payout_df['contract_type'] == contract_type].copy()
    if type_df.empty: return 1.0

    # Ensure the DataFrame column is numeric, coercing errors
    type_df['barrier'] = pd.to_numeric(type_df['barrier'], errors='coerce')
    type_df.dropna(subset=['barrier'], inplace=True)
    if type_df.empty: return 1.0

    type_df['diff'] = (type_df['barrier'] - abs(numeric_barrier)).abs()
    closest_row = type_df.loc[type_df['diff'].idxmin()]
    return closest_row['payout']

def plot_equity_curve(balance_history, strat_id, initial_capital, output_dir='plots'):
    if not os.path.exists(output_dir): os.makedirs(output_dir)
    plt.figure(figsize=(12, 7))
    plt.plot(balance_history)
    plt.title(f"Equity Curve for {strat_id}\nInitial Capital: ${initial_capital:.2f}")
    plt.xlabel("Number of Trade Rounds")
    plt.ylabel("Account Balance ($)")
    plt.grid(True)
    filename = f"{output_dir}/equity_{strat_id}_capital_{int(initial_capital)}.png"
    plt.savefig(filename)
    plt.close()
    return filename

# ==============================================================================
# 4. THE BACKTESTING ENGINE CLASS
# ==============================================================================
class BacktestRunner:
    def __init__(self, strategy, historical_data, payout_data, initial_capital):
        self.strategy = strategy; self.prices = historical_data
        self.payouts = payout_data; self.initial_capital = initial_capital
        self.current_balance = initial_capital; self.balance_history = [initial_capital]
        self.peak_balance = initial_capital; self.max_drawdown = 0
        self.consecutive_wins = 0; self.max_consecutive_wins = 0
        self.consecutive_losses = 0; self.max_consecutive_losses = 0

    def run(self):
        strat = self.strategy
        for index in range(0, len(self.prices) - strat['duration'], DATA_DOWNSAMPLE_FACTOR):
            entry_price = self.prices[index]
            future_ticks = self.prices[index + 1 : index + 1 + strat['duration']]
            trades = [
                {'type': 'ONETOUCH', 'barrier_val': strat['p_ot_b'], 'stake_ratio': strat['stake_ratio'][0]},
                {'type': 'NOTOUCH',  'barrier_val': strat['p_nt_b'], 'stake_ratio': strat['stake_ratio'][1]},
                {'type': 'ONETOUCH', 'barrier_val': -strat['n_ot_b'], 'stake_ratio': strat['stake_ratio'][0]},
                {'type': 'NOTOUCH',  'barrier_val': -strat['n_nt_b'], 'stake_ratio': strat['stake_ratio'][1]},
            ]
            round_net_profit = 0
            for trade in trades:
                payout_rate = find_closest_payout(trade['barrier_val'], trade['type'], self.payouts)
                
                # --- NEW: Stake is now a fixed dollar amount based on the ratio ---
                actual_stake = float(trade['stake_ratio'])
                
                absolute_barrier = entry_price + trade['barrier_val']
                is_win = False
                if trade['type'] == 'ONETOUCH':
                    is_win = (future_ticks >= absolute_barrier).any() if trade['barrier_val'] > 0 else (future_ticks <= absolute_barrier).any()
                elif trade['type'] == 'NOTOUCH':
                    is_win = not (future_ticks >= absolute_barrier).any() if trade['barrier_val'] > 0 else not (future_ticks <= absolute_barrier).any()

                if is_win:
                    # Note: Payout rate from the table is the total return, so profit is (return - stake)
                    # Assuming the provided payout is the final return on a $100 stake. We scale it.
                    profit_per_100_stake = (payout_rate * 100) - 100
                    profit_for_actual_stake = (profit_per_100_stake / 100) * actual_stake
                    round_net_profit += profit_for_actual_stake
                else:
                    round_net_profit -= actual_stake
            
            self._update_metrics(round_net_profit)
        return self.get_results()

    def _update_metrics(self, round_pnl):
        self.current_balance += round_pnl; self.balance_history.append(self.current_balance)
        if self.current_balance > self.peak_balance: self.peak_balance = self.current_balance
        drawdown = self.peak_balance - self.current_balance
        if drawdown > self.max_drawdown: self.max_drawdown = drawdown
        if round_pnl > 0:
            self.consecutive_wins += 1; self.consecutive_losses = 0
            if self.consecutive_wins > self.max_consecutive_wins: self.max_consecutive_wins = self.consecutive_wins
        elif round_pnl < 0:
            self.consecutive_losses += 1; self.consecutive_wins = 0
            if self.consecutive_losses > self.max_consecutive_losses: self.max_consecutive_losses = self.consecutive_losses
    
    def get_results(self):
        total_profit_usd = self.current_balance - self.initial_capital
        total_profit_percent = (total_profit_usd / self.initial_capital) * 100 if self.initial_capital > 0 else 0
        max_drawdown_percent = (self.max_drawdown / self.peak_balance) * 100 if self.peak_balance > 0 else 0
        return {'strategy_id': self.strategy['id'], 'initial_capital': self.initial_capital, 'final_balance': self.current_balance, 'total_profit_usd': total_profit_usd, 'total_profit_percent': total_profit_percent, 'max_drawdown_usd': self.max_drawdown, 'max_drawdown_percent': max_drawdown_percent, 'max_consecutive_wins': self.max_consecutive_wins, 'max_consecutive_losses': self.max_consecutive_losses, 'total_rounds': len(self.balance_history) - 1, 'balance_history': self.balance_history}

# ==============================================================================
# 5. MAIN EXECUTION
# ==============================================================================
def main():
    try:
        df_ticks = pd.read_csv(TICK_DATA_FILE, usecols=['price'])
        price_data = df_ticks['price'].to_numpy()
        payout_data_io = io.StringIO(PAYOUT_DATA_STRING)
        df_payout = pd.read_csv(payout_data_io)
        # We no longer need the 'stake' column from the payout file, as we define it directly
        df_payout = df_payout[['barrier', 'payout', 'contract_type']].dropna()
        df_payout['barrier'] = pd.to_numeric(df_payout['barrier'])
    except FileNotFoundError as e: print(f"❌ Error: Could not find data file: {e.filename}"); return
    except Exception as e: print(f"❌ Error loading data: {e}"); return
    
    logger = CSVSummaryLogger()
    start_time = time.time()
    
    print("="*80 + "\n" + "ADVANCED RISK & CAPITAL ANALYSIS BACKTESTER".center(80) + "\n" + "="*80)

    for strat in STRATEGIES_TO_TEST:
        for capital in INITIAL_CAPITAL_AMOUNTS:
            print(f"\n🔬 Running Simulation for Strategy '{strat['id']}' with Initial Capital ${capital:.2f}...")
            runner = BacktestRunner(strat, price_data, df_payout, capital)
            results = runner.run()
            plot_filename = plot_equity_curve(results['balance_history'], strat['id'], capital)
            csv_log_data = {**results, 'plot_filename': plot_filename}; del csv_log_data['balance_history']
            logger.log_summary(csv_log_data)
            print("\n" + "-"*50 + f"\n    RESULTS FOR: {strat['id']} | Start Capital: ${capital:.2f}\n" + "-"*50)
            print(f"    -> Final Balance:          ${results['final_balance']:>10.2f}")
            print(f"    -> Net Profit:             ${results['total_profit_usd']:>+10.2f} ({results['total_profit_percent']:+.2f}%)")
            print(f"    -> Max Drawdown:           ${results['max_drawdown_usd']:>10.2f} ({results['max_drawdown_percent']:.2f}%)")
            print(f"    -> Longest Win Streak:     {results['max_consecutive_wins']} rounds")
            print(f"    -> Longest Loss Streak:    {results['max_consecutive_losses']} rounds")
            print(f"    -> Equity Curve Plot:      '{plot_filename}'")
            print("-"*50)
    
    end_time = time.time()
    print(f"\n✅ All simulations complete. Total analysis time: {end_time - start_time:.2f} seconds.")
    print(f"📄 Summary of all runs saved to '{logger.filename}'.")

if __name__ == '__main__':
    print("Starting Advanced Risk Analysis Engine...")
    print("Before running, make sure you have pandas, numpy, and matplotlib: pip install pandas numpy matplotlib")
    main()
