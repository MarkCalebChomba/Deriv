import json
import threading
import time
import csv
import os
from datetime import datetime, timezone

# --- CONFIGURATION ---
CSV_FILENAME = 'live_market_data.csv'
# --- To get live data, use a REAL money account's API token ---
# A real account token will start with "CR...".
API_KEY = 'JN8xvbsq1nZd9CY' 

# --- Library Import ---
try:
    from websocket import WebSocketApp
except ImportError:
    print("❌ Critical Error: The 'websocket-client' library is not installed correctly."); exit(1)

# ==============================================================================
# 1. THREAD-SAFE CSV LOGGER
# ==============================================================================
class CSVTickLogger:
    def __init__(self, filename):
        self.filename = filename
        self.fieldnames = ['timestamp_utc', 'price']
        # A lock to prevent race conditions when writing to the file from multiple threads
        self.lock = threading.Lock()
        self._initialize_file()

    def _initialize_file(self):
        """Create the file and write the header if it doesn't exist."""
        with self.lock:
            if not os.path.exists(self.filename):
                with open(self.filename, 'w', newline='') as f:
                    writer = csv.DictWriter(f, fieldnames=self.fieldnames)
                    writer.writeheader()
                print(f"📄 Created log file: {self.filename}")

    def log_tick(self, timestamp, price):
        """Appends a single tick record to the CSV file in a thread-safe manner."""
        with self.lock:
            with open(self.filename, 'a', newline='') as f:
                writer = csv.DictWriter(f, fieldnames=self.fieldnames)
                writer.writerow({'timestamp_utc': timestamp, 'price': price})

# --- Data Logger Bot ---
class DerivTickLoggerBot:
    def __init__(self, api_key, logger):
        self.api_key = api_key; self.logger = logger
        self.ws = None; self.is_running = True; self.is_connected = False
        self.is_authorized = False; self.state = "INITIALIZING"; self.tick_count = 0

    def start(self):
        """Starts the bot's main connection and lifecycle loop."""
        self.connect()
        while self.is_running:
            if not self.is_connected and self.state != "RECONNECTING":
                self.start_reconnect()
            time.sleep(1)

    def stop(self):
        self.is_running = False
        if self.ws and self.is_connected:
            self.ws.close()
        print("\nLogger stopped.")

    def start_reconnect(self):
        self.state = "RECONNECTING"
        self.is_authorized = False
        print("\nConnection lost. Attempting to reconnect in 10 seconds...")
        time.sleep(10)
        if self.is_running:
            self.connect()

    def connect(self):
        print("🔌 Attempting to connect...")
        self.ws = WebSocketApp(
            "wss://ws.binaryws.com/websockets/v3?app_id=1089",
            on_open=self.on_open,
            on_message=self.on_message,
            on_error=self.on_error,
            on_close=self.on_close
        )
        threading.Thread(target=self.ws.run_forever, daemon=True).start()
        
    def send(self, data):
        if self.ws and self.is_connected:
            data['req_id'] = 1 
            self.ws.send(json.dumps(data))

    def on_open(self, ws):
        print("🔗 Connected to Deriv WebSocket.")
        self.is_connected = True
        self.authorize()

    def on_error(self, ws, error):
        print(f"❌ WebSocket error: {error}")
        self.is_connected = False

    def on_close(self, ws, close_status_code, close_msg):
        print("🔌 WebSocket connection closed.")
        self.is_connected = False
        
    def authorize(self):
        print("🔐 Authorizing...")
        self.send({"authorize": self.api_key})

    def on_message(self, ws, message):
        """This bot's logic is very simple: it only processes authorization and ticks."""
        data = json.loads(message)
        msg_type = data.get('msg_type')

        if msg_type == 'authorize':
            if 'error' in data:
                print(f"❌ Authorization failed: {data['error']['message']}")
                self.is_running = False
                return
            print("✅ Authorization successful! Subscribing to tick stream...")
            self.is_authorized = True
            self.state = "LOGGING"
            self.send({'ticks': 'R_75', 'subscribe': 1})
        
        elif msg_type == 'tick' and 'tick' in data:
            # The core work of the bot happens here
            timestamp = datetime.now(timezone.utc).isoformat()
            price = data['tick']['quote']
            self.logger.log_tick(timestamp, price)
            
            self.tick_count += 1
            print(f"\r   -> Logged {self.tick_count} live ticks... Price: {price:.2f}", end="")

# --- Main Execution ---
def main():
    if API_KEY == 'YOUR_REAL_API_TOKEN_HERE':
        print("🛑 Please replace 'YOUR_REAL_API_TOKEN_HERE' with your real Deriv.com API token."); return

    logger = CSVTickLogger(CSV_FILENAME)
    bot = DerivTickLoggerBot(API_KEY, logger)
    try:
        bot.start()
    except KeyboardInterrupt:
        print("\n🛑 Shutting down logger manually...")
    finally:
        bot.stop()
        print(f"\nData collection finished. Data saved to '{CSV_FILENAME}'.")

if __name__ == "__main__":
    main()
